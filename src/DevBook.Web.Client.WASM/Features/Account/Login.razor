@page "/Account/Login"

<div class="flex justify-center">
    <MudCard Class="m-4 w-[40rem]">
        <MudCardHeader>
            <MudText Typo="Typo.h5">Login to DevBook</MudText>
        </MudCardHeader>
        <MudCardContent>
            <MudForm @ref="form" @bind-IsValid="@formIsValid" @bind-Errors="@errors">
                <MudTextField T="string" Label="Email" @ref="email" Required="true" RequiredError="Email is required!"
                              Validation="@(new EmailAddressAttribute() {ErrorMessage = "The email address is invalid"})" />
                <MudTextField T="string" Label="Password" @ref="password"
                              InputType="InputType.Password"
                              Required="true"
                              RequiredError="Password is required!" />
            </MudForm>
            @if (loginErrorVisible)
            {
                <MudPaper Class="pa-4">
                    <MudText Color="@Color.Error">Invalid email or password.</MudText>
                </MudPaper>
            }
        </MudCardContent>
        <MudCardActions>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" FullWidth="true" OnClick="@LoginAndRedirect">Login</MudButton>
        </MudCardActions>
        <MudText Class="m-4 text-center">
            Don't have an account? <MudLink>Register now</MudLink>
        </MudText>
    </MudCard>
</div>

@code {
    [Inject] IDevBookWebApiClient DevBookApiClient { get; init; } = null!;
    [Inject] AuthenticationStateProvider AuthenticationStateProvider { get; init; } = null!;
    [Inject] NavigationManager NavigationManager { get; init; } = null!;

    bool formIsValid;
    string[] errors = { };
    MudTextField<string>? email;
    MudTextField<string>? password;
    MudForm form { get; set; } = null!;
    bool loginErrorVisible = false;

    private async Task LoginAndRedirect()
    {
        await form.Validate();
        if (form.IsValid)
        {
            var devBookAuthTokenProvider = (CookieAuthenticationStateProvider) AuthenticationStateProvider;
            var success = await devBookAuthTokenProvider.Login(new LoginModel { Email = email?.Value, Password = password?.Value });
            if (success)
            {
                NavigationManager.NavigateTo("/dashboard");
            }
            else
            {
                loginErrorVisible = true;
            }
        }
    }
}