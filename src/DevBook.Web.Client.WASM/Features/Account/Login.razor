@page "/Account/Login"

<div class="flex justify-center">
    <EditForm Model="@_loginForm" OnValidSubmit="OnValidSubmit">
        <DataAnnotationsValidator />
        <MudCard Class="m-4 w-[40rem]">
            <MudCardHeader>
                <MudText Typo="Typo.h5">Login to DevBook</MudText>
            </MudCardHeader>
            <MudCardContent>
                <MudTextField Label="Email" @bind-Value="_loginForm.Email" For="@(() => _loginForm.Email)" />
                <MudTextField Label="Password" InputType="InputType.Password" @bind-Value="_loginForm.Password" For="@(() => _loginForm.Password)" />
                @if (showLoginErrors)
                {
                    <div class="pa-4">
                        @foreach(var error in loginErrors)
                        {
                            <MudText Color="@Color.Error">@error</MudText>
                        }
                    </div>
                }
            </MudCardContent>
            <MudCardActions>
                <MudButton Disabled="@_processing" ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" FullWidth="true">
                    @if (_processing)
                    {
                        <MudProgressCircular Class="mr-3" Size="Size.Small" Indeterminate="true" />
                    }
                    <MudText>Login</MudText>
                </MudButton>
            </MudCardActions>
            <MudText Class="p-4 text-center">
                Don't have an account? <MudLink Href="account/register">Register now</MudLink>
            </MudText>
        </MudCard>
    </EditForm>
</div>

@code {
    [SupplyParameterFromQuery(Name = "returnUrl")]
    public string? ReturnUrl { get; set; }

    [SupplyParameterFromQuery(Name = "email")]
    public string? QueryEmail { get; set; }

    [Inject] IAccountManagement AccountManagement { get; init; } = null!;
    [Inject] NavigationManager NavigationManager { get; init; } = null!;

    private readonly LoginForm _loginForm = new();
    private bool _processing = false;

    bool showLoginErrors;
    string[] loginErrors = [];

    protected override void OnInitialized()
    {
        if (!string.IsNullOrWhiteSpace(QueryEmail))
        {
            _loginForm.Email = QueryEmail;
        }
    }

    private async Task OnValidSubmit()
    {
        _processing = true;
        var result = await AccountManagement.LoginAsync(_loginForm.Email, _loginForm.Password);
        result.Switch(
            success =>
            {
                if (string.IsNullOrWhiteSpace(ReturnUrl))
                {
                    NavigationManager.NavigateTo("/dashboard");
                    return;
                }

                NavigationManager.NavigateTo(ReturnUrl);
            },
            apiError =>
            {
                loginErrors = apiError.Errors;
                showLoginErrors = true;
            }
        );
        _processing = false;
    }

    public record LoginForm
    {
        [Required(AllowEmptyStrings = false)]
        [EmailAddress]
        public string Email { get; set; } = string.Empty;

        [Required(AllowEmptyStrings = false)]
        public string Password { get; set; } = string.Empty;
    }
}