@page "/Account/Login"

@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations

<MudCard Class="m-4">
    <MudCardHeader>
        <MudText Typo="Typo.h5">Login to DevBook</MudText>
    </MudCardHeader>
    <MudCardContent>
        <MudForm @ref="form" @bind-IsValid="@success" @bind-Errors="@errors">
            <MudTextField T="string" Label="Email" @ref="email" Required="true" RequiredError="Email is required!"
                          Validation="@(new EmailAddressAttribute() {ErrorMessage = "The email address is invalid"})" />
            <MudTextField T="string" Label="Password" @ref="password"
                          InputType="InputType.Password"
                          Required="true"
                          RequiredError="Password is required!" />
        </MudForm>
    </MudCardContent>
    <MudCardActions>
        <MudButton Class="ml-1" Variant="Variant.Filled" Color="Color.Primary" DisableElevation="true" OnClick="@SignIn">Sign in</MudButton>
    </MudCardActions>
</MudCard>
@code {
    [Inject] IDevBookWebApiClient DevBookApiClient { get; init; } = null!;
    [Inject] AuthenticationStateProvider AuthenticationStateProvider { get; init; } = null!;
    [Inject] NavigationManager NavigationManager { get; init; } = null!;

    bool success;
    string[] errors = { };
    MudTextField<string>? email;
    MudTextField<string>? password;
    MudForm form { get; set; } = null!;

    private async Task SignIn()
    {
        await form.Validate();
        if (form.IsValid)
        {
            var devBookAuthTokenProvider = (CookieAuthenticationStateProvider) AuthenticationStateProvider;
            await devBookAuthTokenProvider.Login(new LoginModel { Email = email?.Value, Password = password?.Value });
            NavigationManager.NavigateTo("/dashboard");
        }
    }
}