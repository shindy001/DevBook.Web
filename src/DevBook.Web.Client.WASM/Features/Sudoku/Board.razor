@page "/Sudoku"

<PageTitle>Sudoku</PageTitle>

<MudCard Class="m-4">
    <MudCardHeader>
        <CardHeaderContent>
            <div>
                <MudText Typo="Typo.h5">Sudoku</MudText>
                <MudButton StartIcon="@Icons.Material.Filled.Add" Variant="Variant.Filled" Color="Color.Primary">
                    New Board
                </MudButton>
            </div>
        </CardHeaderContent>
    </MudCardHeader>
    <MudCardContent>
        <div class="flex justify-center">
            <div class="border-solid border-2 border-gray-600" oncontextmenu="return false;">
                @foreach(var segment in _numberSegments)
                {
                    <div class="flex text-lg"> 
                    @foreach(var number in segment)
                    {
                        <div>
                            <MudPaper
                                Class="flex justify-center align-center border-solid border-2 border-gray-600 rounded-none cursor-pointer select-none hover:bg-gray-800/30"
                                Style="height:64px;width:64px;"
                                @oncontextmenu="(e) => ChangeNumber(e, number.Id)"
                                @onclick="(e) => ChangeNumber(e, number.Id)">
                                <span class="@(number.IsReadOnly ? "text-green-600 font-bold" : "")">@(number.Value == 0 ? string.Empty : number.Value)</span>
                            </MudPaper>
                        </div>
                    }
                    </div>
                }
            </div>
        </div>
    </MudCardContent>
</MudCard>

@code {
    private PageModel _pageModel = new();
    private Dictionary<int, SudokuNumber> _sudokuNumbers = [];
    private IEnumerable<IGrouping<int, SudokuNumber>> _numberSegments = [];

    protected override async Task OnInitializedAsync()
    {
        _sudokuNumbers = GetSudokuNumbers(_pageModel.GridOrigin);
        _numberSegments = _sudokuNumbers.Values.GroupBy(x => x.SegmentNumber);
    }

    private Dictionary<int, SudokuNumber> GetSudokuNumbers(int[][] gridNumbers)
    {
        var numbers = new Dictionary<int, SudokuNumber>();

        for (int i = 0; i < gridNumbers.Length; i++)
        {
            for (int j = 0; j < gridNumbers[i].Length; j++)
            {
                int segmentNumber = (i / 3) * 3 + (j / 3);
                var id = numbers.Count;
                var number = gridNumbers[i][j];
                numbers.Add(id, new SudokuNumber(id, segmentNumber, number, isReadOnly: number != 0));
            }
        }

        return numbers;
    }

    private void ChangeNumber(MouseEventArgs mouseEventArgs, int numberId)
    {
        var currentNumber = _sudokuNumbers[numberId];

        if (currentNumber.IsReadOnly)
        {
            return;
        }
        else if (mouseEventArgs.Button == 0) // Left click
        {
            _sudokuNumbers[numberId].Value = currentNumber.Value == 9 ? 0 : currentNumber.Value + 1;
        }
        else if (mouseEventArgs.Button == 2) // Right click
        {
            _sudokuNumbers[numberId].Value = currentNumber.Value == 0 ? 9 : currentNumber.Value - 1;
        }
    }

    private sealed class SudokuNumber
    {
        public int Id { get; init; }
        public int SegmentNumber { get; init; }
        public int Value { get; set; }
        public bool IsReadOnly { get; init; }

        public SudokuNumber(int id, int segmentNumber, int value, bool isReadOnly)
        {
            this.Id = id;
            this.SegmentNumber = segmentNumber;
            this.Value = value;
            this.IsReadOnly = isReadOnly;
        }
    }

    private sealed record PageModel
    {
        public int[][] GridOrigin { get; } =
        [
            [0, 0, 0, 0, 3, 0, 0, 0, 4],
            [3, 0, 0, 6, 2, 0, 5, 0, 0],
            [2, 0, 8, 5, 0, 0, 0, 0, 6],
            [0, 0, 0, 0, 1, 5, 0, 0, 8],
            [0, 0, 5, 9, 4, 0, 0, 1, 0],
            [0, 0, 0, 0, 6, 2, 0, 0, 0],
            [1, 0, 6, 0, 0, 9, 0, 0, 0],
            [8, 0, 4, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 4, 8, 0, 0, 6, 0],
        ];

        public int[][] Solution { get; } =
        [
            [5, 6, 9, 1, 3, 7, 8, 2, 4],
            [3, 4, 1, 6, 2, 8, 5, 9, 7],
            [2, 7, 8, 5, 9, 4, 1, 3, 6],
            [6, 9, 2, 7, 1, 5, 3, 4, 8],
            [7, 8, 5, 9, 4, 3, 6, 1, 2],
            [4, 1, 3, 8, 6, 2, 7, 5, 9],
            [1, 3, 6, 2, 7, 9, 4, 8, 5],
            [8, 2, 4, 3, 5, 6, 9, 7, 1],
            [9, 5, 7, 4, 8, 1, 2, 6, 3],
        ];

        public string Difficulty = "Medium";
    }
}