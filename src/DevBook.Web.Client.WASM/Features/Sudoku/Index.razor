@page "/Sudoku"
@attribute [AllowAnonymous]

<PageTitle>Sudoku</PageTitle>

<MudCard Class="m-4">
    <MudCardHeader>
        <CardHeaderContent>
            <div class="flex flex-row justify-between">
                <MudText Typo="Typo.h5">Sudoku</MudText>
                <div class="flex gap-2">
                    <MudButton StartIcon="@Icons.Material.Filled.Add" Variant="Variant.Filled" Color="Color.Primary" OnClick="GetNewBoard">New Board</MudButton>
                    <MudButton StartIcon="@Icons.Material.Filled.RestartAlt" Variant="Variant.Filled" Color="Color.Primary" OnClick="ResetBoard">Reset Board</MudButton>
                </div>
            </div>
            <div>
                How to play:
                <ul class="list-disc ml-4">
                    <li>Use <b>Left</b> mouse button to increase number on board.</li>
                    <li>Use <b>Right</b> mouse button to decrease number on board.</li>
                    <li>Validate your solution or current state by clicking on <b>Validate</b> button.</li>
                    <li>Get a new board by clicing on <b>New Board</b> button.</li>
                    <li>You can also reset the board by clicking on <b>Reset</b> button.</li>
                    <li>You can also use backtracking algorithm to auto solve the board. There is a 5ms delay between iterations to see it in action.</li>
                </ul>
                <MudText Class="italic mt-2">Note: Some boards have multiple valid solutions.</MudText>
            </div>
        </CardHeaderContent>
    </MudCardHeader>
    <MudCardContent>
        <div class="flex justify-center">
            <div class="grid grid-cols-3 border-solid border-2 border-gray-600" oncontextmenu="return false;">
                @foreach (var segment in _currentNumbersBySegments)
                {
                    <div class="grid grid-cols-3 text-lg m-1"> 
                    @foreach(var number in segment)
                    {
                        <div class="border-solid border-2 border-gray-600 rounded-none cursor-pointer select-none hover:bg-gray-800/30 @(_showInvalidSolution && number.IsInvalid ? "bg-red-900" : "")">
                            <MudText
                                Class="flex justify-center align-center"
                                Style="height:64px;width:64px;"
                                @oncontextmenu="(e) => ChangeNumber(e, number)"
                                @onclick="(e) => ChangeNumber(e, number)">
                                <span class="@(number.IsReadOnly ? "text-green-600 font-bold" : "")">@(number.Value == 0 ? string.Empty : number.Value)</span>
                            </MudText>
                        </div>
                    }
                    </div>
                }
            </div>
        </div>
    </MudCardContent>
    <MudCardActions Class="flex flex-col justify-center gap-8">
        <div class="flex flex-col gap-2">
            <div class="flex gap-2">
                <MudButton StartIcon="@Icons.Material.Filled.AutoMode" Variant="Variant.Filled" Color="Color.Primary" OnClick="() => StartAutoSolver()">Auto Solve (backtracking algo with delay)</MudButton>
                <MudButton StartIcon="@Icons.Material.Filled.Stop" Variant="Variant.Filled" Color="Color.Primary" OnClick="() => StopAutoSolver()">Stop Auto Solve</MudButton>
            </div>
            <MudButton StartIcon="@Icons.Material.Filled.AssignmentTurnedIn" Variant="Variant.Filled" Color="Color.Primary" OnClick="ValidateSolution">Validate</MudButton>
        </div>
        <div>
        @if (_showWinMessage)
        {
            <MudText Class="text-green-600">Your solution is correct. Thanks for playing.</MudText>
        }

        @if (_showInvalidSolution)
        {
            <div class="flex align-center gap-2">
                <MudText Class="text-red-600">Your solution is invalid.</MudText>
                <MudButton StartIcon="@Icons.Material.Filled.HideSource" Variant="Variant.Filled" Color="Color.Primary" OnClick="() => _showInvalidSolution = false">Hide Validation</MudButton>
            </div>
        }
        </div>
    </MudCardActions>
</MudCard>

@implements IDisposable

@code {
    [Inject] NavigationManager NavigationManager { get; set; } = null!;
    [Inject] ILocalStorageService LocalStorage { get; set; } = null!;
    [Inject] IMediator Mediator { get; set; } = null!;

    private SudokuData _sudokuData = new();
    private IEnumerable<IGrouping<int, SudokuNumber>> _currentNumbersBySegments = [];

    private bool _showWinMessage = false;
    private bool _showInvalidSolution = false;
    private CancellationTokenSource _autoSolverCancellationTokenSource = new();
    private Func<object?, LocationChangedEventArgs, Task>? _saveSudokuDataFn;

    protected override async Task OnInitializedAsync()
    {
        _saveSudokuDataFn = async (object? s, LocationChangedEventArgs a) => await SaveSudokuData(s, a);
        NavigationManager.LocationChanged += async (s, a) => await _saveSudokuDataFn(s, a);
        await InitializeBoard();
    }

    private async Task InitializeBoard()
    {
        var savedData = await GetSavedSudokuData();

        _sudokuData = savedData is not null && savedData.CurrentNumbers.Any()
            ? _sudokuData = savedData
            : _sudokuData = await GetSudokuData();

        GroupNumbersToSegments();
    }

    private async Task SaveSudokuData(object? sender, LocationChangedEventArgs e)
    {
        await LocalStorage.SetItemAsync<SudokuData>(nameof(SudokuData), _sudokuData);
    }

    private async Task<SudokuData?> GetSavedSudokuData()
    {
        return await LocalStorage.GetItemAsync<SudokuData?>(nameof(SudokuData));
    }

    private async Task<SudokuData> GetSudokuData()
    {
        var boardData = await Mediator.Send(new GetBoardDataQuery());
        var gridNumbersArray = boardData.GridNumbers
            .Select(innerCollection => innerCollection.ToArray())
            .ToArray();

        return new SudokuData
        {
            GridOrigin = gridNumbersArray,
            CurrentNumbers = GetSudokuNumbers(gridNumbersArray),
        };
    }

    private async Task GetNewBoard()
    {
        StopAutoSolver();
        _sudokuData = await GetSudokuData();
        GroupNumbersToSegments();
        HideSolutionMessages();
    }

    private void ResetBoard()
    {
        StopAutoSolver();
        _sudokuData.CurrentNumbers = GetSudokuNumbers(_sudokuData.GridOrigin);
        _currentNumbersBySegments = _sudokuData.CurrentNumbers.SelectMany(x => x.Select(x => x)).GroupBy(x => x.SegmentNumber);
        HideSolutionMessages();
    }

    private void ValidateSolution()
    {
        var isAnyNumberInvalid = false;

        for (var i = 0; i < _sudokuData.CurrentNumbers.Length; i++)
        {
            for (var j = 0; j < _sudokuData.CurrentNumbers[i].Length; j++)
            {
                var currentNumber = _sudokuData.CurrentNumbers[i][j];
                if (currentNumber.Value != 0 && IsValidNumber(i, j, currentNumber, currentNumber.Value))
                {
                    currentNumber.IsInvalid = false;
                }
                else
                {
                    currentNumber.IsInvalid = true;
                    isAnyNumberInvalid = true;
                }
            }
        }

        if (isAnyNumberInvalid)
        {
            ShowSolutionInvalidMessage();
        }
        else
        {
            ShowWinMessage();
        }
    }

    private void ShowWinMessage()
    {
        _showWinMessage = true;
        _showInvalidSolution = false;
    }

    private void ShowSolutionInvalidMessage()
    {
        _showWinMessage = false;
        _showInvalidSolution = true;
    }

    private void HideSolutionMessages()
    {
        _showWinMessage = false;
        _showInvalidSolution = false;
    }

    private void GroupNumbersToSegments()
    {
        _currentNumbersBySegments = _sudokuData.CurrentNumbers.SelectMany(x => x.Select(x => x)).GroupBy(x => x.SegmentNumber);
    }

    private SudokuNumber[][] GetSudokuNumbers(int[][] gridNumbers)
    {
        var numbers = new List<SudokuNumber[]>();

        for (int i = 0; i < gridNumbers.Length; i++)
        {
            var numberList = new List<SudokuNumber>();
            for (int j = 0; j < gridNumbers[i].Length; j++)
            {
                int segmentNumber = (i / 3) * 3 + (j / 3);
                var id = numbers.Count;
                var number = gridNumbers[i][j];
                numberList.Add(new SudokuNumber(Guid.NewGuid(), segmentNumber, number, isReadOnly: number != 0));
            }
            numbers.Add(numberList.ToArray());
        }

        return numbers.ToArray();
    }

    private void ChangeNumber(MouseEventArgs mouseEventArgs, SudokuNumber number)
    {
        if (number.IsReadOnly)
        {
            return;
        }
        else if (mouseEventArgs.Button == 0) // Left click
        {
            number.Value = number.Value == 9 ? 0 : number.Value + 1;
        }
        else if (mouseEventArgs.Button == 2) // Right click
        {
            number.Value = number.Value == 0 ? 9 : number.Value - 1;
        }
    }

    private async Task StartAutoSolver()
    {
        ResetBoard();
        _autoSolverCancellationTokenSource = new CancellationTokenSource();
        try
        {
            await AutoSolveSudoku(_autoSolverCancellationTokenSource.Token);
        }
        catch (OperationCanceledException)
        {
            // AutoSolver stopped
        }
    }

    private void StopAutoSolver()
    {
        _autoSolverCancellationTokenSource.Cancel();
    }

    // TODO - simplify auto solve algo
    private async Task<bool> AutoSolveSudoku(CancellationToken cancellationToken, int row = 0, int column = 0)
    {
        if (cancellationToken.IsCancellationRequested)
        {
            throw new OperationCanceledException();
        }

        if (row == 9)
        {
            return true;
        }
        else if (column == 9)
        {
            return await AutoSolveSudoku(cancellationToken, row + 1, 0);
        }
        else if (_sudokuData.CurrentNumbers[row][column].Value != 0)
        {
            return await AutoSolveSudoku(cancellationToken, row, column + 1);
        }
        else
        {
            for(var k = 1; k < 10; k++)
            {
                var number = _sudokuData.CurrentNumbers[row][column];
                if (IsValidNumber(row, column, number, k))
                {
                    number.Value = k;
                    StateHasChanged();
                    await Task.Delay(5);

                    if (await AutoSolveSudoku(cancellationToken, row, column + 1))
                    {
                        return true;
                    }
                    number.Value = 0;
                }
            }
            return false;
        }
    }

    private bool IsValidNumber(int row, int column, SudokuNumber currentNumber, int nextNumber)
    {
        return IsNotInRow(row, column, nextNumber)
            && IsNotInColumn(row, column, nextNumber)
            && IsNotInSegment(currentNumber, nextNumber);
    }

    private bool IsNotInRow(int row, int column, int number)
    {
        for (var i = 0; i < _sudokuData.CurrentNumbers[row].Length; i++)
        {
            if (i == column)
            {
                continue;
            }

            if (_sudokuData.CurrentNumbers[row][i].Value == number)
            {
                return false;
            }
        }
        return true;
    }

    private bool IsNotInColumn(int row, int column, int number)
    {
        for (var i = 0; i < _sudokuData.CurrentNumbers.Length; i++)
        {
            if (i == row)
            {
                continue;
            }

            if (_sudokuData.CurrentNumbers[i][column].Value == number)
            {
                return false;
            }
        }
        return true;
    }

    private bool IsNotInSegment(SudokuNumber currentNumber, int nextNumber)
    {
        var group = _currentNumbersBySegments.FirstOrDefault(x => x.FirstOrDefault(x => x.Id == currentNumber.Id) != null);
        return group?.Where(x => x.Id != currentNumber.Id).ToList()?.All(x => x.Value != nextNumber) ?? false;
    }

    private sealed class SudokuNumber
    {
        public Guid Id { get; init; }
        public int SegmentNumber { get; init; }
        public int Value { get; set; }
        public bool IsReadOnly { get; init; }
        public bool IsInvalid { get; set; }

        public SudokuNumber(Guid id, int segmentNumber, int value, bool isReadOnly)
        {
            this.Id = id;
            this.SegmentNumber = segmentNumber;
            this.Value = value;
            this.IsReadOnly = isReadOnly;
        }
    }

    private sealed record SudokuData
    {
        public SudokuNumber[][] CurrentNumbers { get; set; } = [];
        public int[][] GridOrigin { get; set; } = [];
    }

    void IDisposable.Dispose() => NavigationManager.LocationChanged -= async (s, a) => await _saveSudokuDataFn!(s, a);

    private sealed record GetBoardDataQuery : IRequest<BoardData>;

    private sealed class GetSudokuDataQueryHandler(IDevBookWebApiActionExecutor devBookWebApiActionExecutor)
        : IRequestHandler<GetBoardDataQuery, BoardData>
    {
        public async Task<BoardData> Handle(GetBoardDataQuery request, CancellationToken cancellationToken)
        {
            var result = await devBookWebApiActionExecutor.Execute(x => x.Sudoku_BoardAsync(cancellationToken));
            return result.Match(
                data => data,
                apiError => throw new DevBookException(apiError.Errors));
        }
    }
}