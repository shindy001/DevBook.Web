@page "/Projects"

<PageTitle>Projects</PageTitle>

<MudCard Class="m-4">
	<MudCardHeader>
		<CardHeaderContent>
			<div class="flex justify-between">
				<MudText Typo="Typo.h5">Projects</MudText>
				<MudButton Href="projects/create" StartIcon="@Icons.Material.Filled.Add" Variant="Variant.Filled" Color="Color.Primary">
					Create New Project
				</MudButton>
			</div>
		</CardHeaderContent>
	</MudCardHeader>
	<MudCardContent>
        <MudTable T="ProjectDto" Items="@_projects" Loading="@_loading" LoadingProgressColor="Color.Primary" Hover="true" Filter="((x) => FilterFunc(x, _searchString))" OnRowClick="@OpenUpdateProjectPage">
            <ToolBarContent>
                <MudTextField 
                    @bind-Value="_searchString"
                    Immediate="true"
                    Placeholder="Search"
                    Adornment="Adornment.Start"
                    AdornmentIcon="@Icons.Material.Filled.Search"
                    IconSize="Size.Medium" />
            </ToolBarContent>
            <HeaderContent>
                <MudTh></MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd Class="flex cursor-pointer">
                    <div class="flex">
                        <div style="color: @context.HexColor"><MudIcon Icon="@Icons.Material.Filled.Circle" /></div>
                        <MudText Class="ml-3">@context.Name @(context.HourlyRate != null ? $"({context.HourlyRate} {context.Currency}/h)" : "")</MudText>
                    </div>
                </MudTd>
            </RowTemplate>
        </MudTable>
    </MudCardContent>
</MudCard>

@code {
    [Inject] private IProjectsService ProjectsService { get; set; } = null!;
    [Inject] private NavigationManager NavigationManager { get; init; } = null!;

    private IEnumerable<ProjectDto> _projects = [];
    private string _searchString = string.Empty;

    private bool _loading = false;

    protected override async Task OnInitializedAsync()
    {
        _loading = true;
        _projects = await ProjectsService.GetAll();
        _loading = false;
    }

    private bool FilterFunc(ProjectDto project, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;

        if (project.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase) == true)
            return true;

        return false;
    }

    private void OpenUpdateProjectPage(TableRowClickEventArgs<ProjectDto> rowClickEvent)
    {
        NavigationManager.NavigateTo($"/projects/{rowClickEvent.Item.Id}");
    }
}