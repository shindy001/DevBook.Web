@page "/Projects/{ProjectId:guid}"

<PageTitle>Update Project</PageTitle>

<MudCard Class="m-4 max-w-screen-sm">
    <MudCardHeader>
        <CardHeaderContent>
            <MudText Typo="Typo.h5">
                <MudIconButton Icon="@Icons.Material.Filled.ArrowBackIosNew" Color="Color.Inherit" Href="/projects" />
                Update Project
            </MudText>
        </CardHeaderContent>
    </MudCardHeader>
    <MudCardContent>
        <EditForm Model="@_pageModel.UpdateForm" OnValidSubmit="OnValidSubmit">
            <DataAnnotationsValidator />
            <MudCard>
                <MudCardContent>
                    <MudTextField Label="Name" @bind-Value="_pageModel.UpdateForm.Name" For="@(() => _pageModel.UpdateForm.Name)" />
                    <MudTextField Label="Details" Class="mt-3" @bind-Value="_pageModel.UpdateForm.Details" For="@(() => _pageModel.UpdateForm.Details)" />
                    <div class="flex space-x-6">
                        <MudTextField Label="Hourly rate" Class="mt-3" @bind-Value="_pageModel.UpdateForm.HourlyRate" For="@(() => _pageModel.UpdateForm.HourlyRate)" />
                        <MudTextField Label="Currency" Class="mt-3" @bind-Value="_pageModel.UpdateForm.Currency" For="@(() => _pageModel.UpdateForm.Currency)" />
                    </div>
                    <div class="flex items-end mt-2">
                        <div class="w-6 h-6 mr-2 mb-1 rounded-full" style="background: @(_pageModel.UpdateForm.HexColor ?? "#adadb1")"></div>
                        <MudColorPicker
                            @bind-Text="_pageModel.UpdateForm.HexColor"
                            Placeholder="Color"
                            Label="Color"
                            Adornment="Adornment.None"
                            PickerVariant="PickerVariant.Inline"
                            ColorPickerView="ColorPickerView.Palette">
                        </MudColorPicker>
                    </div>
                </MudCardContent>
                <MudCardActions>
                    <MudButton Disabled="@_processing" ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">
                        <MudText>Update</MudText>
                    </MudButton>
                </MudCardActions>
            </MudCard>
        </EditForm>
    </MudCardContent>
</MudCard>

@code {
    [Parameter] public required Guid ProjectId { get; set; }

    [Inject] private IExecutor Executor { get; set; } = null!;
    [Inject] private NavigationManager NavigationManager { get; init; } = null!;

    private PageModel _pageModel = new();
    private bool _processing = false;

    protected override async Task OnInitializedAsync()
    {
        var updateForm = await Executor.ExecuteQuery(new GetUpdateProjectFormQuery(ProjectId));
        _pageModel.UpdateForm.Name = updateForm.Name;
        _pageModel.UpdateForm.Details = updateForm.Details;
        _pageModel.UpdateForm.Currency = updateForm.Currency;
        _pageModel.UpdateForm.HourlyRate = updateForm.HourlyRate;
        _pageModel.UpdateForm.HexColor = updateForm.HexColor;
    }

    private async Task OnValidSubmit()
    {
        await Executor.ExecuteCommand(new UpdateProjectCommand(
            Id: ProjectId,
            Name: _pageModel.UpdateForm.Name,
            Details: _pageModel.UpdateForm.Details,
            Currency: _pageModel.UpdateForm.Currency,
            HourlyRate: _pageModel.UpdateForm.HourlyRate,
            HexColor: _pageModel.UpdateForm.HexColor));

        NavigationManager.NavigateTo("/projects");
    }

    private sealed record PageModel
    {
        public UpdateProjectForm UpdateForm { get; init; } = new();

        public sealed record UpdateProjectForm
        {
            [Required(AllowEmptyStrings = false)]
            public string Name { get; set; } = string.Empty;

            public string? Details { get; set; }
            public string? Currency { get; set; }
            public int? HourlyRate { get; set; }
            public string? HexColor { get; set; }
        }
    }

    private sealed record GetUpdateProjectFormQuery(Guid Id) : IQuery<PageModel.UpdateProjectForm>;

    private sealed class GetUpdateProjectFormQueryHandler(IDevBookWebApiActionExecutor devBookWebApiActionExecutor)
        : IQueryHandler<GetUpdateProjectFormQuery, PageModel.UpdateProjectForm>
    {
        public async Task<PageModel.UpdateProjectForm> Handle(GetUpdateProjectFormQuery request, CancellationToken cancellationToken)
        {
            var result = await devBookWebApiActionExecutor.Execute(x => x.Projects_GetByIdAsync(request.Id, cancellationToken));
            return result.Match(
                project => new PageModel.UpdateProjectForm
                    {
                        Name = project.Name,
                        Details = project.Details,
                        HourlyRate = project.HourlyRate,
                        Currency = project.Currency,
                        HexColor = project.HexColor
                    },
                apiError => throw new DevBookException(apiError.Errors));
        }
    }

    private sealed record UpdateProjectCommand(
        Guid Id,
        string Name,
        string? Details,
        string? Currency,
        int? HourlyRate,
        string? HexColor)
        : ICommand;

    private sealed class UpdateProjectCommandHandler(IDevBookWebApiActionExecutor devBookWebApiActionExecutor)
        : ICommandHandler<UpdateProjectCommand>
    {
        public async Task Handle(UpdateProjectCommand request, CancellationToken cancellationToken)
        {
            var result = await devBookWebApiActionExecutor.Execute(
                x => x.Projects_UpdateAsync(
                    id: request.Id,
                    body: new() 
                    {
                        Name = request.Name,
                        Details = request.Details,
                        Currency = request.Currency,
                        HourlyRate = request.HourlyRate,
                        HexColor = request.HexColor
                    },
                cancellationToken));

            result.Match(
                success => success,
                apiError => throw new DevBookException(apiError.Errors));
        }
    }
}