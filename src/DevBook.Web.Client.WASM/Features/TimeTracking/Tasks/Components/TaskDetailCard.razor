@if (Visible)
{
    <div class="@Class">
        <EditForm Model="@_createOrUpdateTaskForm" OnValidSubmit="OnValidSubmit" OnInvalidSubmit="OnInvalidSubmit">
            <DataAnnotationsValidator />
            <MudCard>
                <MudCardHeader>
                    <MudIconButton Icon="@Icons.Material.Outlined.Close" Color="Color.Primary" OnClick="() => OnCancel.InvokeAsync()" />
                </MudCardHeader>
                <MudCardContent>
                    <MudTextField Label="Description" @bind-Value="_createOrUpdateTaskForm.Description" For="@(() => _createOrUpdateTaskForm.Description)" />
                    <MudTextField Label="Details" Class="mt-3" @bind-Value="_createOrUpdateTaskForm.Details" For="@(() => _createOrUpdateTaskForm.Details)" />
                    <MudSelect T="Project" @bind-Value="_createOrUpdateTaskForm.Project" Label="Project" AnchorOrigin="Origin.BottomCenter">
                        @if (!_createOrUpdateTaskForm.AvailableProjects.Any())
                        {
                            <MudSelectItem T="Project" Value="@(null)">
                                    <div class="flex">
                                        <MudText>No projects, </MudText>
                                        <MudLink Href="projects/create" Class="ml-3">Create New Here</MudLink>
                                    </div>
                            </MudSelectItem>
                        } else
                        {
                            @foreach(var project in _createOrUpdateTaskForm.AvailableProjects)
                            {
                                <MudSelectItem Value="@project">
                                    <div class="flex">
                                        <div style="color: @project.HexColor"><MudIcon Icon="@Icons.Material.Filled.Circle" /></div>
                                        <MudText Class="ml-3">@project.Name</MudText>
                                    </div>
                                </MudSelectItem>
                            }
                        }
                    </MudSelect>
                    <MudDatePicker Label="Day" Class="mt-3" @bind-Date="_createOrUpdateTaskForm.Date" DateFormat="dd.MM.yyyy" For="@(() => _createOrUpdateTaskForm.Date)" />
                    <MudTimePicker Label="Start" @bind-Time="_createOrUpdateTaskForm.Start" For="@(() => _createOrUpdateTaskForm.Start)" />
                    <MudTimePicker Label="End" @bind-Time="_createOrUpdateTaskForm.End" For="@(() => _createOrUpdateTaskForm.End)" />
                </MudCardContent>
                <MudCardActions>
                    <MudButton Class="ml-auto mx-2" StartIcon="@Icons.Material.Outlined.Save" ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary">@(_taskId is null ? "Create" : "Update")</MudButton>
                    @if (_taskId != null)
                    {
                        <DeleteTaskButton TaskId="_taskId" OnDelete="() => OnDelete.InvokeAsync()" />
                    }
                </MudCardActions>
            </MudCard>
        </EditForm>
    </div>
}

@code {
    [Parameter] public bool Visible { get; set; } = true;
    [Parameter] public string Class { get; set; } = string.Empty;
    [Parameter] public EventCallback OnCreateOrUpdate { get; set; }
    [Parameter] public EventCallback OnCancel { get; set; }
    [Parameter] public EventCallback OnDelete { get; set; }
    [Inject] private IMediator Mediator { get; set; } = null!;
    [Inject] ISnackbar Snackbar { get; set; } = null!;

    private CreateOrUpdateTaskForm _createOrUpdateTaskForm = new();
    private Guid? _taskId;

    public async Task PopulateTaskDetailCard(Guid? id)
    {
        _taskId = id;
        var projects = await FetchProjects();
        if (_taskId is not null)
        {
            WorkTask task = await FetchTask(_taskId.Value);
            _createOrUpdateTaskForm = new CreateOrUpdateTaskForm
            {
                Project = task.Project is null ? null : task.Project,
                Description = task.Description,
                Details = task.Details,
                Date = task.Date.Date,
                Start = task.Start,
                End = task.End,
                AvailableProjects = projects
            };
        }
        else
        {
            _createOrUpdateTaskForm = new();
            _createOrUpdateTaskForm.AvailableProjects = projects;
        }
        StateHasChanged();
    }

    private async Task<Project[]> FetchProjects()
    {
        var result = await Mediator.Send(new GetProjects.Query());
        return result.Match(
            projects => projects.ToArray(),
            error => throw new DevBookException($"Fetch error: {error.Description}")
        );
    }

    private async Task<WorkTask> FetchTask(Guid id)
    {
        var result = await Mediator.Send(new GetTask.Query(id));
        return result.Match(
            task => task,
            error => throw new DevBookException($"Fetch error: {error.Description}")
        );
    }

    private void OnInvalidSubmit(EditContext context)
    {
        // Notify change of fields with custom validation attributes to show validation error
        context.NotifyFieldChanged(context.Field(nameof(CreateOrUpdateTaskForm.End)));
    }

    private async Task OnValidSubmit()
    {
        OneOf<Success, DevBookError> result;
        if (_taskId is null)
        {
            result = await Mediator.Send(new CreateTask.Command(
                ProjectId: _createOrUpdateTaskForm.Project?.Id,
                Description: _createOrUpdateTaskForm.Description,
                Details: _createOrUpdateTaskForm.Details,
                Date: _createOrUpdateTaskForm.Date!.Value,
                Start: _createOrUpdateTaskForm.Start!.Value,
                End: _createOrUpdateTaskForm.End!.Value
            ));
        }
        else
        {
            result = await Mediator.Send(new UpdateTask.Command(
                Id: _taskId.Value,
                ProjectId: _createOrUpdateTaskForm.Project?.Id,
                Description: _createOrUpdateTaskForm.Description,
                Details: _createOrUpdateTaskForm.Details,
                Date: _createOrUpdateTaskForm.Date!.Value,
                Start: _createOrUpdateTaskForm.Start!.Value,
                End: _createOrUpdateTaskForm.End!.Value
            ));
        }

        await result.Match(
            async (success) =>
            {
                Snackbar.Add("Create/Update successful", Severity.Success);
                await OnCreateOrUpdate.InvokeAsync();
            },
            error => Task.FromResult(Snackbar.Add($"Create/Update failed: {error.Description}", Severity.Error))
    );
        await OnCreateOrUpdate.InvokeAsync();
    }

    private sealed record CreateOrUpdateTaskForm
    {
        private static DateTimeOffset Now = DateTimeOffset.Now;

        [Required(AllowEmptyStrings = false)]
        public string? Description { get; set; }

        public string? Details { get; set; }

        public Project? Project { get; set; }

        [Required]
        public DateTime? Date { get; set; } = DateTimeOffset.Now.Date;

        [Required]
        public TimeSpan? Start { get; set; } = Now.TimeOfDay;

        [Required]
        [TimeSpanGreaterThanAttribute("Start")]
        public TimeSpan? End { get; set; } = Now.TimeOfDay.Add(TimeSpan.FromHours(1));

        public Project[] AvailableProjects { get; set; } = [];
    }
}