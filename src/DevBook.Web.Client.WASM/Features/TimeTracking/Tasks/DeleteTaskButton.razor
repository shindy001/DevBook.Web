<MudButton StartIcon="@Icons.Material.Outlined.Delete" Color="Color.Primary" Variant="Variant.Filled" OnClick="() => Delete()">Delete</MudButton>

@code {
    [Parameter] public Guid? TaskId { get; set; }
    [Parameter] public EventCallback OnDelete { get; set; }

    [Inject] private IExecutor Executor { get; set; } = null!;
    [Inject] ISnackbar Snackbar { get; set; } = null!;

    private async Task Delete()
    {
        if (TaskId != null)
        {
            await Executor.ExecuteCommand(new DeleteTaskCommand(TaskId.Value));
            Snackbar.Add("Delete successful", Severity.Success);
            await OnDelete.InvokeAsync();
        } 
    }

    private sealed record DeleteTaskCommand(Guid TaskId) : ICommand;

    private sealed class DeleteTaskCommandHandler(IDevBookWebApiActionExecutor devBookWebApiActionExecutor)
        : ICommandHandler<DeleteTaskCommand>
    {
        public async Task Handle(DeleteTaskCommand request, CancellationToken cancellationToken)
        {
            var result = await devBookWebApiActionExecutor.Execute(
                x => x.WorkTasks_DeleteAsync(request.TaskId, cancellationToken));

            result.Match(
                success => success,
                apiError => throw new DevBookException(apiError.Errors));
        }
    }
}