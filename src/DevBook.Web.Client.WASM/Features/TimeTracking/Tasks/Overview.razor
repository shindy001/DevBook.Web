@page "/tasks"

<PageTitle>Tasks</PageTitle>

<MudCard Class="m-4">
    <MudCardHeader>
        <CardHeaderContent>
            <div class="flex justify-between">
                <MudText Typo="Typo.h5">Work Tasks</MudText>
                <MudButton StartIcon="@Icons.Material.Filled.Add" Variant="Variant.Filled" Color="Color.Primary">
                    Create New Task
                </MudButton>
            </div>
        </CardHeaderContent>
    </MudCardHeader>
    <MudCardContent>
        <MudTable
            T="PageModel.TasksInDay"
            Items="@_pageModel.TasksInDays"
            Loading="@_loading"
            LoadingProgressColor="Color.Primary"
            Hover="true"
            Filter="((x) => FilterFunc(x, _searchString))"
            OnRowClick="ToggleDayDetails">
            <ToolBarContent>
                <MudTextField @bind-Value="_searchString"
                              Immediate="true"
                              Placeholder="Search"
                              Adornment="Adornment.Start"
                              AdornmentIcon="@Icons.Material.Filled.Search"
                              IconSize="Size.Medium" />
            </ToolBarContent>
            <HeaderContent>
                <MudTh></MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd Class="flex cursor-pointer">
                    <MudStack Spacing="2">
                        <MudButton OnClick="() => context.ToggleDetails()">@context.Day</MudButton>
                        @foreach(var task in context.Tasks)
                        {
                            <MudCollapse Expanded="@context.ShowDetails">
                                <MudText Class="ml-3">@task.Description @(task.End is not null ? $"- {(task.End - task.Start)?.Humanize(2)} " : "")</MudText>
                            </MudCollapse>
                        }
                        
                    </MudStack>
                </MudTd>
            </RowTemplate>
        </MudTable>
    </MudCardContent>
</MudCard>

@code {
    [Inject] private IExecutor Executor { get; set; } = null!;
    [Inject] private NavigationManager NavigationManager { get; init; } = null!;

    private PageModel _pageModel = new();
    private string _searchString = string.Empty;

    private bool _loading = false;

    protected override async Task OnInitializedAsync()
    {
        _loading = true;
        _pageModel = await Executor.ExecuteQuery(new GetPageModelQuery());
        _pageModel.TasksInDays = GroupTasksByDay(_pageModel.WorkTasks);
        _loading = false;
    }

    private IEnumerable<PageModel.TasksInDay> GroupTasksByDay(IEnumerable<PageModel.WorkTask> tasks)
    {
        List<PageModel.TasksInDay> tasksInDays = new();
        var dayGroups = tasks.OrderByDescending(x => x.Date).GroupBy(x => DateOnly.FromDateTime(x.Date.DateTime));
        foreach(var group in dayGroups)
        {
            tasksInDays.Add(new PageModel.TasksInDay(group.Key, group.Select(x => x).ToArray()));
        }

        return tasksInDays;
    }

    private bool FilterFunc(PageModel.TasksInDay tasksInDay, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;

        if (tasksInDay.Tasks.Any(x => x.Description?.Contains(searchString, StringComparison.OrdinalIgnoreCase) == true))
            return true;

        return false;
    }

    private void ToggleDayDetails(TableRowClickEventArgs<PageModel.TasksInDay> rowClickEvent)
    {
        rowClickEvent.Item.ToggleDetails();
    }

    private sealed record GetPageModelQuery : IQuery<PageModel>;

    private sealed record PageModel
    {
        public IEnumerable<WorkTask> WorkTasks { get; init; } = [];
        public IEnumerable<TasksInDay> TasksInDays { get; set; } = [];

        public sealed record WorkTask(Guid Id, string? Description, DateTimeOffset Date, TimeSpan Start, TimeSpan? End);
        public sealed record TasksInDay
        {
            public DateOnly Day { get; init; }
            public WorkTask[] Tasks { get; init; }
            public bool ShowDetails { get; private set; } = false;

            public TasksInDay(DateOnly day, WorkTask[] tasks, bool showDetails = false)
            {
                Day = day;
                Tasks = tasks;
                ShowDetails = showDetails;
            }

            public void ToggleDetails() => ShowDetails = !ShowDetails;
        }
    }

    private sealed class GetPageModelQueryHandler(IDevBookWebApiActionExecutor devBookWebApiActionExecutor)
        : IQueryHandler<GetPageModelQuery, PageModel>
    {
        public async Task<PageModel> Handle(GetPageModelQuery request, CancellationToken cancellationToken)
        {
            var result = await devBookWebApiActionExecutor.Execute(x => x.WorkTasks_GetAllAsync(cancellationToken));
            return result.Match(
                workTasks => new PageModel { WorkTasks = workTasks.Select(x => new PageModel.WorkTask(x.Id, x.Description, x.Date, x.Start, x.End)) },
                apiError => throw new DevBookException(apiError.Errors));
        }
    }
}