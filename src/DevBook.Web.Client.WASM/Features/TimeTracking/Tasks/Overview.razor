@page "/tasks"

<PageTitle>Tasks</PageTitle>
<div class="flex m-4 space-x-4 overflow-y-auto">
    <MudCard Class="grow">
        <MudCardHeader>
            <CardHeaderContent>
                <MudText Typo="Typo.h5">Work Tasks</MudText>
            </CardHeaderContent>
        </MudCardHeader>
        <MudCardContent>
            <div class="flex flex-col items-start">
                <MudButton Class="flex-none" StartIcon="@Icons.Material.Filled.Add" Color="Color.Primary" OnClick="() => ShowCreateTaskDetailCard()">Add New Task</MudButton>
                @if(_pageModel.RunningTask is null)
                {
                    <MudButton Class="flex-none" StartIcon="@Icons.Material.Outlined.PlayArrow" Color="Color.Primary" OnClick="() => StartWork()">Start Work</MudButton>
                }
                else
                {
                    <MudButton Class="flex-none" StartIcon="@Icons.Material.Outlined.Stop" Color="Color.Primary" OnClick="() => StopWork(_pageModel.RunningTask.Id)">Stop Work</MudButton>
                }
            </div>
            <MudExpansionPanels Dense="true" MultiExpansion="true">
                @foreach (var item in _pageModel.TasksInDays)
                {
                    <MudExpansionPanel IsInitiallyExpanded="IsFirstDay(item.Day)">
                        <TitleContent>
                            <div class="flex justify-between items-center">
                                <MudText>@item.Day.DayOfWeek.ToString(), @item.Day.ToString("dd.MM.yyyy")</MudText>
                                <MudText Class="mr-6">@CalculateEarningsPerDay(item)</MudText>
                            </div>
                        </TitleContent>
                        <ChildContent>
                            <MudList Clickable="true" @bind-SelectedItem="_selectedItem" @bind-SelectedValue="_selectedTask" Color="Color.Primary">
                                <div>
                                    @if (_pageModel.RunningTask is not null && IsFirstDay(item.Day))
                                    {
                                        <MudListItem OnClick="() => ShowRunningTaskDetailCard(_pageModel.RunningTask.Id)" Value="_pageModel.RunningTask">
                                            <div class="flex justify-between items-center">
                                                <MudText>@_pageModel.RunningTask.Description</MudText>
                                                <MudText>
                                                    @_runningTaskElapsedTime
                                                    <MudIcon Class="animate-spin" Icon="@Icons.Material.Filled.Refresh" Size="Size.Large" />
                                                </MudText>
                                            </div>
                                        </MudListItem>
                                    }

                                </div>
                                @foreach (var task in item.Tasks)
                                {
                                    @if (task.Id != _pageModel.RunningTask?.Id)
                                    {
                                        <MudListItem OnClick="() => ShowTaskDetailCard(task.Id)" Value="task">
                                            <div class="flex justify-between items-center">
                                                <MudText>@task.Description</MudText>
                                                <MudText>@GetTaskElapsedTime(task.Start, task.End)</MudText>
                                            </div>
                                        </MudListItem>
                                    }
                                }
                            </MudList>
                        </ChildContent>
                    </MudExpansionPanel>
                }
            </MudExpansionPanels>
        </MudCardContent>
    </MudCard>

    <TaskDetailCard @ref="_taskDetailCard" Class="grow" Visible="_showTaskDetailCard" OnCreateOrUpdate="() => RefreshItems()" OnCancel="() => HideTaskDetailCard()" OnDelete="() => RefreshItems(closeDetail: true)" />
    <RunningTaskDetailCard @ref="_runingTaskDetailCard" Class="grow" Visible="_showRunningTaskDetailCard" OnUpdate="() => RefreshItems()" OnCancel="() => HideTaskDetailCard()" OnDelete="() => RefreshItems(closeDetail: true)" />
</div>

@code {
    [Inject] private IExecutor Executor { get; set; } = null!;
    [Inject] private NavigationManager NavigationManager { get; init; } = null!;

    private TaskDetailCard _taskDetailCard = null!;
    private RunningTaskDetailCard _runingTaskDetailCard = null!;
    MudListItem? _selectedItem;
    object? _selectedTask;
    private PageModel _pageModel = new();
    private bool _showTaskDetailCard = false;
    private bool _showRunningTaskDetailCard = false;
    private string _runningTaskElapsedTime = string.Empty;
    private bool _runningTaskRendered = false;
    private bool _loading = false;

    protected override async Task OnInitializedAsync()
    {
        _runningTaskRendered = false;
        await RefreshItems();

        // Timer should not be awaited, othewise will block execution because it is potentially infinity
        StarRunningTaskElapsedTimeTimer();
    }

    private bool IsFirstDay(DateOnly taskDate)
    {
        return _pageModel.TasksInDays.FirstOrDefault()?.Day == taskDate;
    }

    private async Task StarRunningTaskElapsedTimeTimer()
    {
        var timer = new PeriodicTimer(TimeSpan.FromSeconds(1));
        while (await timer.WaitForNextTickAsync())
        {
            if (_pageModel.RunningTask is not null)
            {
                _runningTaskElapsedTime = GetTaskElapsedTime(DateTime.Now.TimeOfDay, _pageModel.RunningTask.Start);
                StateHasChanged();
            }
        }
    }

    private string GetTaskElapsedTime(TimeSpan? end, TimeSpan? start)
    {
        return (end - start)?.Humanize(2, minUnit: TimeUnit.Second) ?? string.Empty;
    }

    private string CalculateEarningsPerDay(PageModel.TasksInDay tasksInDay)
    {
        double earnings = 0;
        string? currency = null;
        foreach(var task in tasksInDay.Tasks)
        {
            if (task.Project?.Currency is not null && task.Project.HourlyRate is not null)
            {
                var totalHours = (task.End - task.Start)?.TotalHours ?? 0;
                earnings += totalHours * (double)task.Project.HourlyRate;
                currency = currency ?? task.Project.Currency;
            }
        }
        return currency is not null && earnings > 0 ? $"{Math.Round(earnings, 5).ToString("0.00")} {currency}" : string.Empty;
    }

    private IEnumerable<PageModel.TasksInDay> GroupTasksByDay(IEnumerable<PageModel.WorkTask> tasks)
    {
        List<PageModel.TasksInDay> tasksInDays = new();
        var dayGroups = tasks.OrderByDescending(x => x.Date).GroupBy(x => DateOnly.FromDateTime(x.Date.DateTime));
        foreach(var group in dayGroups)
        {
            tasksInDays.Add(new PageModel.TasksInDay(group.Key, group.Select(x => x).ToArray()));
        }

        return tasksInDays;
    }

    private bool FilterFunc(PageModel.TasksInDay tasksInDay, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;

        if (tasksInDay.Tasks.Any(x => x.Description?.Contains(searchString, StringComparison.OrdinalIgnoreCase) == true))
            return true;

        return false;
    }

    private async Task ShowTaskDetailCard(Guid id)
    {
        await _taskDetailCard.PopulateTaskDetailCard(id);
        _showRunningTaskDetailCard = false;
        _showTaskDetailCard = true;
    }

    private async Task ShowCreateTaskDetailCard(Guid? id = null)
    {
        await _taskDetailCard.PopulateTaskDetailCard(id: null);
        _showRunningTaskDetailCard = false;
        _showTaskDetailCard = true;
    }

    private async Task ShowRunningTaskDetailCard(Guid id)
    {
        await _runingTaskDetailCard.PopulateRunningTaskDetailCard(id: id);
        _showTaskDetailCard = false;
        _showRunningTaskDetailCard = true;
    }

    private void HideTaskDetailCard()
    {
        _showTaskDetailCard = false;
        _showRunningTaskDetailCard = false;
    }

    private async Task RefreshItems(bool closeDetail = false)
    {
        _loading = true;
        _pageModel = await Executor.ExecuteQuery(new GetPageModelQuery());
        _runningTaskElapsedTime = GetTaskElapsedTime(_pageModel.RunningTask?.End, _pageModel.RunningTask?.Start);
        _loading = false;
        if (closeDetail)
        {
            HideTaskDetailCard();
        }
        StateHasChanged();
    }

    private async Task StartWork()
    {
        var dateTimeOffset = DateTimeOffset.Now;
        await Executor.ExecuteCommand(new StartWorkCommand(Description: "New Task", Date: dateTimeOffset, Start: dateTimeOffset.TimeOfDay));
        await RefreshItems();
    }

    private async Task StopWork(Guid taskId)
    {
        var runningTask = _pageModel.RunningTask;
        var dateTimeOffset = DateTimeOffset.Now;
        await Executor.ExecuteCommand(new StopWorkCommand(TaskId: taskId, End: DateTimeOffset.Now.TimeOfDay));
        await RefreshItems();
    }

    private sealed record GetPageModelQuery : IQuery<PageModel>;

    private sealed record PageModel
    {
        public WorkTask? RunningTask { get; set; } = null;
        public IEnumerable<TasksInDay> TasksInDays { get; set; } = [];

        public sealed record WorkTask(Guid Id, Project? Project, string? Description, DateTimeOffset Date, TimeSpan Start, TimeSpan? End);
        public sealed record Project(Guid Id, string? Name, string? Currency, int? HourlyRate);
        public sealed record TasksInDay
        {
            public DateOnly Day { get; init; }
            public WorkTask[] Tasks { get; init; }

            public TasksInDay(DateOnly day, WorkTask[] tasks)
            {
                Day = day;
                Tasks = tasks;
            }
        }
    }

    private sealed class GetPageModelQueryHandler(IDevBookWebApiActionExecutor devBookWebApiActionExecutor)
        : IQueryHandler<GetPageModelQuery, PageModel>
    {
        public async Task<PageModel> Handle(GetPageModelQuery request, CancellationToken cancellationToken)
        {
            var result = await devBookWebApiActionExecutor.Execute(x => x.WorkTasks_ListAsync(cancellationToken));
            return result.Match(
                workTasksList => new PageModel
                {
                    RunningTask = workTasksList.ActiveWorkTask is null
                        ? null
                        : new PageModel.WorkTask(
                            workTasksList.ActiveWorkTask.Id,
                            workTasksList.ActiveWorkTask.Project is null
                                ? null
                                : new PageModel.Project(
                                    workTasksList.ActiveWorkTask.Project.Id,
                                    workTasksList.ActiveWorkTask.Project.Name,
                                    workTasksList.ActiveWorkTask.Project.Currency,
                                    workTasksList.ActiveWorkTask.Project.HourlyRate),
                            workTasksList.ActiveWorkTask.Description,
                            workTasksList.ActiveWorkTask.Date,
                            workTasksList.ActiveWorkTask.Start,
                            workTasksList.ActiveWorkTask.End),
                    TasksInDays = workTasksList?.WorkTasksInDay?.Select(
                        x => new PageModel.TasksInDay(DateOnly.Parse(x.Key), x.Value.Select(x => new PageModel.WorkTask(
                            x.Id,
                                x.Project is null
                                    ? null
                                    : new PageModel.Project(
                                        x.Project.Id,
                                        x.Project.Name,
                                        x.Project.Currency,
                                        x.Project.HourlyRate),
                            x.Description,
                            x.Date,
                            x.Start,
                            x.End)).ToArray())) ?? []
                },
                apiError => throw new DevBookException(apiError.Errors));
        }
    }

    private sealed record StartWorkCommand(
        string Description,
        DateTimeOffset Date,
        TimeSpan Start)
        : ICommand;

    private sealed class StartWorkCommandCommandHandler(IDevBookWebApiActionExecutor devBookWebApiActionExecutor)
        : ICommandHandler<StartWorkCommand>
    {
        public async Task Handle(StartWorkCommand request, CancellationToken cancellationToken)
        {
            var result = await devBookWebApiActionExecutor.Execute(
                x => x.WorkTasks_StartAsync(
                    new()
                        {
                            Description = request.Description,
                            Date = request.Date,
                            Start = request.Start
                        },
                cancellationToken));

            result.Match(
                success => success,
                apiError => throw new DevBookException(apiError.Errors));
        }
    }

    private sealed record StopWorkCommand(
        Guid TaskId,
        TimeSpan End)
        : ICommand;

    private sealed class StopWorkCommandCommandHandler(IDevBookWebApiActionExecutor devBookWebApiActionExecutor)
        : ICommandHandler<StopWorkCommand>
    {
        public async Task Handle(StopWorkCommand request, CancellationToken cancellationToken)
        {
            var result = await devBookWebApiActionExecutor.Execute(
                x => x.WorkTasks_PatchAsync(
                    request.TaskId,
                    new() { End = request.End }, cancellationToken));

            result.Match(
                success => success,
                apiError => throw new DevBookException(apiError.Errors));
        }
    }
}