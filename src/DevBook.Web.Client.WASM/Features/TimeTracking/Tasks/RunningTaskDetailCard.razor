@if (Visible)
{
    <div class="@Class">
        <EditForm Model="@_updateRunningTaskForm" OnValidSubmit="OnValidSubmit">
            <DataAnnotationsValidator />
            <MudCard>
                <MudCardHeader>
                    <MudIconButton Icon="@Icons.Material.Outlined.Close" Color="Color.Primary" OnClick="() => OnCancel.InvokeAsync()" />
                </MudCardHeader>
                <MudCardContent>
                    <MudTextField Label="Description" @bind-Value="_updateRunningTaskForm.Description" For="@(() => _updateRunningTaskForm.Description)" />
                    <MudTextField Label="Details" Class="mt-3" @bind-Value="_updateRunningTaskForm.Details" For="@(() => _updateRunningTaskForm.Details)" />
                    <MudSelect T="Project" @bind-Value="_updateRunningTaskForm.Project" Label="Project" AnchorOrigin="Origin.BottomCenter">
                        @if (!_updateRunningTaskForm.AvailableProjects.Any())
                        {
                            <MudSelectItem T="Project" Value="@(null)">
                                    <div class="flex">
                                        <MudText>No projects, </MudText>
                                        <MudLink Href="projects/create" Class="ml-3">Create New Here</MudLink>
                                    </div>
                            </MudSelectItem>
                        } else
                        {
                            @foreach(var project in _updateRunningTaskForm.AvailableProjects)
                            {
                                <MudSelectItem Value="@project">
                                    <div class="flex">
                                        <div style="color: @project.HexColor"><MudIcon Icon="@Icons.Material.Filled.Circle" /></div>
                                        <MudText Class="ml-3">@project.Name</MudText>
                                    </div>
                                </MudSelectItem>
                            }
                        }
                    </MudSelect>
                    <MudTimePicker Label="Start" @bind-Time="_updateRunningTaskForm.Start" PickerClosed="SetValidStartTime" />
                </MudCardContent>
                <MudCardActions>
                    <MudButton Class="ml-auto mx-2" StartIcon="@Icons.Material.Outlined.Save" ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary">Update</MudButton>
                    <DeleteTaskButton TaskId="_taskId" OnDelete="() => OnDelete.InvokeAsync()" />
                </MudCardActions>
            </MudCard>
        </EditForm>
    </div>
}

@code {
    [Parameter] public bool Visible { get; set; } = true;
    [Parameter] public string Class { get; set; } = string.Empty;
    [Parameter] public EventCallback OnCancel { get; set; }
    [Parameter] public EventCallback OnUpdate { get; set; }
    [Parameter] public EventCallback OnDelete { get; set; }

    [Inject] private IExecutor Executor { get; set; } = null!;
    [Inject] ISnackbar Snackbar { get; set; } = null!;

    private UpdateRunningTaskForm _updateRunningTaskForm = new();
    private Project[] _availableProjects = [];
    private Guid? _taskId;

    public async Task PopulateRunningTaskDetailCard(Guid? id)
    {
        _taskId = id;
        if (_taskId is not null)
        {
            _updateRunningTaskForm = await Executor.ExecuteQuery(new GetUpdateTaskFormQuery(_taskId.Value));
        }
        else
        {
            _updateRunningTaskForm = new();
        }
        StateHasChanged();
    }

    private void SetValidStartTime()
    {
        var timeOfTheDay = DateTime.Now.TimeOfDay;
        if (_updateRunningTaskForm.Start > timeOfTheDay)
        {
            _updateRunningTaskForm.Start = timeOfTheDay;
            StateHasChanged();
        }  
    }

    private async Task OnValidSubmit()
    {
        await Executor.ExecuteCommand(new UpdateTaskCommand(
                Id: _taskId!.Value,
                Description: _updateRunningTaskForm.Description,
                Project: _updateRunningTaskForm.Project,
                Details: _updateRunningTaskForm.Details,
                Start: _updateRunningTaskForm.Start!.Value
            ));
        Snackbar.Add("Update successful", Severity.Success);
        await OnUpdate.InvokeAsync();
    }

    private sealed record UpdateRunningTaskForm
    {
        private static DateTimeOffset Now = DateTimeOffset.Now;

        public string? Description { get; set; }
        public string? Details { get; set; }
        public Project? Project { get; set; }

        [Required]
        public TimeSpan? Start { get; set; } = Now.TimeOfDay;

        public Project[] AvailableProjects { get; set; } = [];
    }

    private sealed record GetUpdateTaskFormQuery(Guid Id) : IQuery<UpdateRunningTaskForm>;

    private sealed class GetUpdateTaskFormQueryHandler(IDevBookWebApiActionExecutor devBookWebApiActionExecutor)
        : IQueryHandler<GetUpdateTaskFormQuery, UpdateRunningTaskForm>
    {
        public async Task<UpdateRunningTaskForm> Handle(GetUpdateTaskFormQuery request, CancellationToken cancellationToken)
        {
            Project[] availableProjects = [];
            var projectsResult = await devBookWebApiActionExecutor.Execute(x => x.Projects_GetAllAsync(cancellationToken));
            projectsResult.Match(
                projects => availableProjects = projects.Select(x => Project.FromDto(x)).ToArray(),
                apiError => throw new DevBookException(apiError.Errors));

            var workTaskResult = await devBookWebApiActionExecutor.Execute(x => x.WorkTasks_GetByIdAsync(request.Id, cancellationToken));
            return workTaskResult.Match(
                task => new UpdateRunningTaskForm
                    {
                        Description = task.Description,
                        Details = task.Details,
                        Start = task.Start,
                        Project = task.Project is not null && availableProjects.FirstOrDefault(project => project.Id == task?.Project?.Id) is Project project ? project : null,
                        AvailableProjects = availableProjects
                    },
                apiError => throw new DevBookException(apiError.Errors));
        }
    }

    private sealed record UpdateTaskCommand(
        Guid Id,
        string? Description,
        string? Details,
        Project? Project,
        TimeSpan Start)
        : ICommand;

    private sealed class UpdateTaskCommandHandler(IDevBookWebApiActionExecutor devBookWebApiActionExecutor)
        : ICommandHandler<UpdateTaskCommand>
    {
        public async Task Handle(UpdateTaskCommand request, CancellationToken cancellationToken)
        {
            var result = await devBookWebApiActionExecutor.Execute(
                x => x.WorkTasks_PatchAsync(
                    request.Id,
                    new()
                    {
                        Description = request.Description,
                        Details = request.Details,
                        ProjectId = request?.Project?.Id ?? null,
                        Start = request?.Start
                    },
                cancellationToken));

            result.Match(
                success => success,
                apiError => throw new DevBookException(apiError.Errors));
        }
    }
}